//FileName:	id3.h
//Purpose:	Class that allows you to easily manipulate id3 data.  In upcoming versions more field options will be available
//Author:	Brad Zasada
//Homepage:	http://www.bradsoft.net
//Contact:	brad@bradsoft.net
//Report Bugs:  Report bugs via email or post them in the bugs section on my bbs.
//Revision Dates:	2-19-01 (initial writing)
//					2-27-01 (Beta 2)

#ifndef ID3_H
#define ID3_H

#include <windows.h>
#include <dstring.h>
#include <StrUtils.hpp>


#define ID3_VERSION2	19990
#define ID3_VERSION1	12000
#define ID3_FOUND1		13000
#define ID3_FOUND2		14000
#define ID3_FOUNDBOTH	15000

#define ExtractBits(value, start, length) ((value >> (start - 1)) & ((1 << length) - 1))
#define GetFourByteSyncSafe(value1, value2, value3, value4) (((value1 & 255) << 21) | ((value2 & 255) << 14) | ((value3 & 255) << 7) | (value4 & 255))
#define CreateFourByteField(value1, value2, value3, value4) (((value1 & 255) << 24) | ((value2 & 255) << 16) | ((value3 & 255) << 8) | (value4 & 255))


struct ID3Struct
{
	char *band;
	char *album;
	char *title;
	char *comment;
	char *genre;
	char *year;
	char *ID3TAG;
	char *NEWID3;
	char *tracknum;
	char header[10];
	int currsize;
	int currpos;
	int size;
	int version;
	int ready;
	int dynbuffer;
	int	footer, extended, experimental;
	DWORD flags;
};

AnsiString generos[] =
{
 "Blues",
 "Classic Rock",
 "Country",
 "Dance",
 "Disco",
 "Funk",
 "Grunge",
 "Hip-Hop",
 "Jazz",
 "Metal",
 "New Age",
 "Oldies",
 "Other",
 "Pop",
 "R&B",
 "Rap",
 "Reggae",
 "Rock",
 "Techno",
 "Industrial",
 "Alternative",
 "Ska",
 "Death Metal",
 "Pranks",
 "Soundtrack",
 "Euro-Techno",
 "Ambient",
 "Trip-Hop",
 "Vocal",
 "Jazz+Funk",
 "Fusion",
 "Trance",
 "Classical",
 "Instrumental",
 "Acid",
 "House",
 "Game",
 "Sound Clip",
 "Gospel",
 "Noise",
 "AlternRock",
 "Bass",
 "Soul",
 "Punk",
 "Space",
 "Meditative",
 "Instrumental Pop",
 "Instrumental Rock",
 "Ethnic",
 "Gothic",
 "Darkwave",
 "Techno-Industrial",
 "Electronic",
 "Pop-Folk",
 "Eurodance",
 "Dream",
 "Southern Rock",
 "Comedy",
 "Cult",
 "Gangsta",
 "Top 40",
 "Christian Rap",
 "Pop/Funk",
 "Jungle",
 "Native American",
 "Cabaret",
 "New Wave",
 "Psychadelic",
 "Rave",
 "Showtunes",
 "Trailer",
 "Lo-Fi",
 "Tribal",
 "Acid Punk",
 "Acid Jazz",
 "Polka",
 "Retro",
 "Musical",
 "Rock & Roll",
 "Hard Rock   ",
 "Folk",
 "Folk-Rock",
 "National Folk",
 "Swing",
 "Fast Fusion",
 "Bebob",
 "Latin",
 "Revival",
 "Celtic",
 "Bluegrass",
 "Avantgarde",
 "Gothic Rock",
 "Progressive Rock",
 "Psychedelic Rock",
 "Symphonic Rock",
 "Slow Rock",
 "Big Band",
 "Chorus",
 "Easy Listening",
 "Acoustic",
 "Humour",
 "Speech",
 "Chanson",
 "Opera",
 "Chamber Music",
 "Sonata",
 "Symphony",
 "Booty Bass",
 "Primus",
 "Porn Groove",
 "Satire",
 "Slow Jam",
 "Club",
 "Tango",
 "Samba",
 "Folklore",
 "Ballad",
 "Power Ballad",
 "Rhythmic Soul",
 "Freestyle",
 "Duet",
 "Punk Rock",
 "Drum Solo",
 "A capella",
 "Euro-House",
 "Dance Hall"
};


class ID3
{
	public:

		//////////////////////////////////////////////////
		//				simple ID3 manipulation			//
		//////////////////////////////////////////////////
		//All fields are directly accessible by the		//
		//client through the ID3 tag structure.			//
		//////////////////////////////////////////////////

		char *GetArtist		();
		char *GetTrackTitle	();
		char *GetTrackNum	();
		char *GetAlbum		();
		char *GetYear		();
		char *GetComments	();
		char *GetGenre		();
		int GetSize			();
		int SetArtist		(char *src);
		int SetTrackTitle	(char *src);
		int SetTrackNum		(char *src);
		int SetAlbum		(char *src);
		int SetYear			(char *src);
		int SetComments		(char *src);
		int SetGenre		(char *src);
		int LoadID3	       	(char *filepath);

                AnsiString PegaTitulo()
                 {
                   AnsiString texto(GetTrackTitle());
                   texto =  texto.TrimLeft().TrimRight();
                   return texto;
                 }

                AnsiString Peganumero()
                 {
                   AnsiString texto(GetTrackNum());
                   texto =  texto.TrimLeft().TrimRight();
                   return texto;
                 }
                AnsiString PegaArtista()
                 {
                   AnsiString texto(GetArtist());
                   texto =  texto.TrimLeft().TrimRight();
                   return texto;
                 }
                AnsiString PegaAlbum()
                 {
                   AnsiString texto(GetAlbum());
                   texto =  texto.TrimLeft().TrimRight();
                   return texto;
                 }
                AnsiString PegaAno()
                 {
                   AnsiString texto(GetYear());
                   texto =  texto.TrimLeft().TrimRight();
                   return texto;
                 }
                AnsiString PegaComentario()
                 {
                   AnsiString texto(GetComments());
                   texto =  texto.TrimLeft().TrimRight();
                   return texto;
                 }
                AnsiString PegaGenero()
                 {
                   AnsiString texto(GetGenre());
                   AnsiString aux= texto;
                   aux = AnsiReplaceText(AnsiReplaceText(aux.TrimLeft().TrimRight(),"(",""), ")","") ;
                   if(aux!=""&&aux.Length()>3)
                     {
                       aux = AnsiReplaceText(aux,"0","");
                       aux = AnsiReplaceText(aux,"1","");
                       aux = AnsiReplaceText(aux,"2","");
                       aux = AnsiReplaceText(aux,"3","");
                       aux = AnsiReplaceText(aux,"4","");
                       aux = AnsiReplaceText(aux,"5","");
                       aux = AnsiReplaceText(aux,"6","");
                       aux = AnsiReplaceText(aux,"7","");
                       aux = AnsiReplaceText(aux,"8","");
                       aux = AnsiReplaceText(aux,"9","");
                       return aux;
                     }
                   if((aux.Length()>=1&&aux.Length()<=3)&&(aux[1]=='1'||aux[1]=='2'||aux[1]=='3'||aux[1]=='4'||aux[1]=='5'||aux[1]=='6'||aux[1]=='7'||aux[1]=='8'||aux[1]=='9'))
                    { // olha na lista de generos
                      aux = AnsiReplaceText(aux,"(","");
                      aux = AnsiReplaceText(aux,")","");
                      int posicao = StrToInt(aux);
                      if(posicao<126)
                       {
                         return generos[posicao];
                       }
                    }
                   return "";
                 } // fim do metodo


		//////////////////////////////////////////////////
		//		slightly advanced ID3 manipulation		//
		//////////////////////////////////////////////////
		//User can use frame identifiers to retrieve and//
		//manipulate the id3 tag.  These functions are	//
		//only applicable with ID3v2 tags.  Any attempt //
		//to pass an id3v1 tag version with any of the  //
		//following functions will result in a return   //
		//of 0.	 Any of the fields added with AddField()//
		//are accessible only through RetrField().		//
		//////////////////////////////////////////////////

		char *GenerateTag	(BOOL UseBuffer);
		char *RetrField		(char *identifier);
		int AddField		(char *identifier, int length, char *fielddata);

		//////////////////////////////////////////////////
		//				Random Functions				//
		//////////////////////////////////////////////////
		//WriteTag() - Mainly intended for id3v2, since //
		//rewriting the file can be a pain in the ass.	//
		//EncryptSync() - id3v2 requires that all		//
		//integral data in headers and frames be stored //
		//as a sync-safe integer.  This prevents the mp3//
		//player from trying to read the id3 tag as part//
		//of the music file.							//
		//Initialize() - must be called before ID3		//
		//operations can take place.					//
		//////////////////////////////////////////////////

		int Initialize		();
		int WriteTag		(char *filepath);
		int EncryptSync		(char *sBuffer, int num, int start, int numsyncs);	
		int SetVersion		(int version);
		int AutoDetect		(char *filepath);
		char *StrCopy		(char *pDest, const char *toCopy, int length);
		int StrFill			(char *str, int fillx, int ch);

		//////////////////////////////////////////////////
		//				Cleanup Functions				//
		//////////////////////////////////////////////////
		//flush() - completely clears the specified		//
		//ID3Struct.									//
		//ConsolidateSpaces() - used to remove			//
		//sequencial white spaces, and replaces them	//
		//with a single whitespace.						//
		//////////////////////////////////////////////////
		
		int flush			();
		int ConsolidateSpaces(TCHAR wkString[]);
		
		//////////////////////////////////////////////////
		//		Constructor/Destructor Functions		//
		//////////////////////////////////////////////////
		
		ID3();
		~ID3();
	
	private:
		BOOL FrameIsNull	(char *frame, int chars);
		int IsPrimed		();
		ID3Struct myID3;
};

ID3::ID3()
{
	myID3.ready = 0;
}

ID3::~ID3()
{
}

//////////////////////////////////////////////////////////
//AddField() - function for adding ID3v2 fields.		//
//////////////////////////////////////////////////////////

int ID3::AddField(char *identifier, int length, char *fielddata)
{
	char tmpHeader[10];
	char *tmpBuffer, *commfld;

	if((IsPrimed() == 0) || (myID3.version == ID3_VERSION1))
		return -1;

	tmpBuffer = new char[myID3.currsize+1];

	StrCopy(tmpBuffer, myID3.NEWID3, myID3.currsize);
	delete[] myID3.NEWID3;
	myID3.NEWID3 = new char[myID3.currsize + (length + 12)];
	StrFill(myID3.NEWID3, myID3.currsize + (length + 11), 0);
	StrCopy(myID3.NEWID3, tmpBuffer, myID3.currsize);

	StrFill(tmpHeader, 10, 0);
	StrCopy(tmpHeader, identifier, 4);
	EncryptSync(tmpHeader, length+1, 4, 4);
	
	StrCopy(&myID3.NEWID3[myID3.currpos], tmpHeader, 10);
	myID3.currpos += 11;
	myID3.currsize += 11;
	myID3.NEWID3[myID3.currpos-1] = 0;
	if(strstr(identifier, "COMM"))
	{
		commfld = new char[length+1];
		strcpy(&commfld[5], &myID3.comment[0]);
		StrCopy(&commfld[0], "\0eng\0", 5);
		StrCopy(&myID3.NEWID3[myID3.currpos], commfld, length);
		delete[] commfld;
	}
	else
		StrCopy(&myID3.NEWID3[myID3.currpos], fielddata, length);
	myID3.currpos += length;
	myID3.currsize += length;

	strcpy(myID3.NEWID3, "ID3");
	myID3.NEWID3[3] = 3;
	myID3.NEWID3[4] = 0;
	myID3.NEWID3[5] = 0;
	EncryptSync(myID3.NEWID3, myID3.currsize, 6, 4);

	return 1;
}

//////////////////////////////////////////////////////////
//AutoDetect() - function that automatically detects	//
//		ID3 version.									//
//////////////////////////////////////////////////////////

int ID3::AutoDetect(char *filepath)
{
	HANDLE fHandle;
	DWORD sentinel;
	char fBuffer[3];
	BOOL found1, found2;
	int rValue;

	fHandle =	CreateFile(filepath,
					GENERIC_READ,
					0,
					0,
					OPEN_EXISTING,
					FILE_ATTRIBUTE_NORMAL,
					0);


	ReadFile(fHandle, fBuffer, 3, &sentinel, NULL);

	if(strstr(fBuffer, "ID3"))
		found2 = TRUE;
	
	SetFilePointer(fHandle, -128, 0, FILE_END);
	ReadFile(fHandle, fBuffer, 3, &sentinel, NULL);
	
	if(strstr(fBuffer, "TAG"))
		found1 = TRUE;

	rValue = ((found1 == TRUE) && (found2 == TRUE)) ? ID3_FOUNDBOTH : (found1 == TRUE) ? ID3_FOUND1 : (found2 == TRUE) ? ID3_FOUND2 : 0;
	myID3.version = ((found1 == TRUE) && (found2 == TRUE)) ? ID3_VERSION2 : (found1 == TRUE) ? ID3_VERSION1 : (found2 == TRUE) ? ID3_VERSION2 : 0;

	CloseHandle(fHandle);

	return myID3.version;
}

//////////////////////////////////////////////////////////
//ConsolidateSpaces() - Remove large gaps in your fields//
//////////////////////////////////////////////////////////

int ID3::ConsolidateSpaces(TCHAR wkString[])
{
	char *tmpStr;
	int whitespaces = 0, currstrpos = 0;
	
	tmpStr	= new char[strlen(wkString)+1];

	tmpStr[0] = '\0';
	
	for(int z=0;z<strlen(wkString);z++)
	{
		if(wkString[z] != 32)
		{
			if(whitespaces > 0) { tmpStr[currstrpos] = 32; currstrpos++; }
			tmpStr[currstrpos] = wkString[z];
			tmpStr[z+1] = '\0';
			currstrpos++;
			whitespaces = 0;
		}
		else
			whitespaces++;
	}
	strcpy(wkString, tmpStr);
	return 0;
}

int ID3::EncryptSync(char *sBuffer, int num, int start, int numsyncs)
{
	for(int z = 0;z < numsyncs; z++)
		sBuffer[start+numsyncs-z-1] = ExtractBits(num, ((z*7)+1), 7);
	return 0;
}

//////////////////////////////////////////////////////////
//flush() - Must be called to flush all previous id3	//
//		id3 data.  Should be used after an id3 has been	//
//		created and the user would like to create a new //
//		id3.											//
//////////////////////////////////////////////////////////

int ID3::flush()
{
	myID3.dynbuffer		= 0;
	myID3.currsize		= 0;
	myID3.currpos		= 0;
	myID3.size			= 0;
	myID3.version		= 0;
	myID3.flags			= 0;
	delete[] myID3.album;
	delete[] myID3.band;
	delete[] myID3.comment;
	delete[] myID3.genre;
	delete[] myID3.title;
	delete[] myID3.year;
	delete[] myID3.ID3TAG;
	delete[] myID3.NEWID3;
	myID3.ready = 0;
	return 0;
}

BOOL ID3::FrameIsNull(char *frame, int chars)
{
	BOOL	isnull;

	for(int x = 0; x < chars; x++)
		if(frame[x] != 0)
			isnull = FALSE;
	return isnull;
}

//////////////////////////////////////////////////////////
//GenerateTag() - Fills the new id3 tag field of the id3//
//		tag structure, and if a buffer is wanted it will//
//		return a buffer also.							//
//////////////////////////////////////////////////////////

char *ID3::GenerateTag(BOOL UseBuffer)
{
	myID3.currsize = 50;
	int commsize = 0;

	if(myID3.version == ID3_VERSION1)
		return 0;

	commsize = strlen(myID3.comment);

	ConsolidateSpaces(myID3.title);
	ConsolidateSpaces(myID3.album);
	ConsolidateSpaces(myID3.tracknum);
	ConsolidateSpaces(myID3.band);

	AddField("TIT2", strlen(myID3.title), myID3.title);
	AddField("TALB", strlen(myID3.album), myID3.album);
	AddField("TRCK", strlen(myID3.tracknum), myID3.tracknum);
	AddField("TYER", strlen(myID3.year), myID3.year);
	AddField("TPE1", strlen(myID3.band), myID3.band);
	AddField("TCON", strlen(myID3.genre), myID3.genre);
	AddField("COMM", commsize+5, &myID3.comment[0]);

	if(UseBuffer)
		return myID3.NEWID3;

	return 0;
}

char *ID3::GetAlbum()
{
	return myID3.album;
}

char *ID3::GetArtist()
{
	return myID3.band;
}

char *ID3::GetComments()
{
	return myID3.comment;
}

char *ID3::GetGenre()
{
	return myID3.genre;
}

int ID3::GetSize()
{
	return myID3.size;
}

char *ID3::GetTrackNum()
{
	return myID3.tracknum;
}

char *ID3::GetTrackTitle()
{
	return myID3.title;
}

char *ID3::GetYear()
{
	return myID3.year;
}

//////////////////////////////////////////////////////////
//Initialize() - Must be called before and id3			//
//		manipulation can occur.  Not called just for	//
//		first id3 tag, but before every new id3 tag		//
//		the user wants to create.  Basically you have to//
//		call flush() when finished with a tag, and then //
//		Initialize() to begin a tag.					//
//////////////////////////////////////////////////////////

int ID3::Initialize()
{
	myID3.header[0]		= '\0';
	myID3.dynbuffer		= 0;
	myID3.currsize		= 10;
	myID3.currpos		= 10;
	myID3.size			= 0;
	myID3.version		= 0;
	myID3.flags			= 0;
	myID3.album			= new char[1];
	myID3.band			= new char[1];
	myID3.comment		= new char[1];
	myID3.genre			= new char[1];
	myID3.title			= new char[1];
	myID3.year			= new char[1];
	myID3.ID3TAG		= new char[1];
	myID3.NEWID3		= new char[1];
	myID3.tracknum		= new char[1];
	myID3.album[0]		= '\0';
	myID3.band[0]		= '\0';
	myID3.comment[0]	= '\0';
	myID3.genre[0]		= '\0';
	myID3.title[0]		= '\0';
	myID3.year[0]		= '\0';
	myID3.ID3TAG[0]		= '\0';
	myID3.NEWID3[0]		= '\0';
	myID3.tracknum[0]	= '\0';

	myID3.ready = 1;

	return 0;
}

int ID3::IsPrimed()
{
	return myID3.ready;
}

//////////////////////////////////////////////////////////
//LoadID3() - Use this to load id3 data from file.		//
//////////////////////////////////////////////////////////

int ID3::LoadID3(char *filepath)
{
	char	tmpHeader[10];
	int		framesize = 0, pos = 0;
	HANDLE	fHandle;
	DWORD	bytesread;

	fHandle =	CreateFile(filepath,
			GENERIC_READ,
			0,
			0,
			OPEN_EXISTING,
			FILE_ATTRIBUTE_NORMAL,
			0);

	switch(myID3.version)
	{
		case ID3_VERSION2:
			ReadFile(fHandle, myID3.header, 10, &bytesread, 0);
			
			if(!strstr(myID3.header, "ID3"))
			{
				CloseHandle(fHandle);
				return -1;
			}

			tmpHeader[0] = '\0';

			myID3.size			= GetFourByteSyncSafe(myID3.header[6], myID3.header[7], myID3.header[8], myID3.header[9]);
			myID3.flags			= (myID3.header[6] & 255);
			myID3.footer		= ExtractBits(myID3.flags, 5, 1);
			myID3.extended		= ExtractBits(myID3.flags, 7, 1);
			myID3.experimental	= ExtractBits(myID3.flags, 6, 1);
			myID3.ID3TAG		= new char[myID3.size-(myID3.footer * 10)];

			SetFilePointer(fHandle, 0, 0, FILE_BEGIN);
			ReadFile(fHandle, myID3.ID3TAG, myID3.size-(myID3.footer * 10), &bytesread, NULL);
			StrCopy(tmpHeader, myID3.ID3TAG, 10);

			myID3.album		= RetrField("TALB");
			myID3.band		= RetrField("TPE1");
			myID3.comment	= RetrField("COMM");
			myID3.genre		= RetrField("TCON");
			myID3.title		= RetrField("TIT2");
			myID3.tracknum	= RetrField("TRCK");
			myID3.year		= RetrField("TYER");

			if(myID3.comment[5] > 0)
				strcpy(&myID3.comment[0], &myID3.comment[5]);

			break;
		case ID3_VERSION1:
			myID3.ID3TAG = new char[129];
			myID3.album = new char[31];
			myID3.band = new char[31];
			myID3.comment = new char[31];
			myID3.genre = new char[2];
			myID3.title = new char[31];
			myID3.year = new char[5];

			SetFilePointer(fHandle, -128, 0, FILE_END);
			ReadFile(fHandle, myID3.header, 3, &bytesread, 0);
			
			if(!strstr(myID3.header, "TAG"))
			{
				myID3.title[0] = '\0';
				myID3.band[0] = '\0';
				myID3.album[0] = '\0';
				myID3.year[0] = '\0';
				myID3.comment[0] = '\0';
				myID3.genre[0] = '\0';
				CloseHandle(fHandle);
				return -1;
			}

			ReadFile(fHandle, myID3.title, 30, &bytesread, NULL);
			ReadFile(fHandle, myID3.band, 30, &bytesread, NULL);
			ReadFile(fHandle, myID3.album, 30, &bytesread, NULL);
			ReadFile(fHandle, myID3.year, 4, &bytesread, NULL);
			ReadFile(fHandle, myID3.comment, 30, &bytesread, NULL);
			ReadFile(fHandle, &myID3.genre[0], 1, &bytesread, NULL);
			SetFilePointer(fHandle, -128, 0, FILE_END);
			ReadFile(fHandle, myID3.ID3TAG, 128, &bytesread, 0);

			myID3.album[29] = '\0';
			myID3.band[29] = '\0';
			myID3.comment[29] = '\0';
			myID3.genre[1] = '\0';
			myID3.title[29] = '\0';
			myID3.year[4] = '\0';

			break;
	}	
	CloseHandle(fHandle);
	return 0;
}

//////////////////////////////////////////////////////////
//LoadID3() - Retrieve a field from the original id3 tag//
//		that cannot be accessed through built in		//
//		methods.  For instance "TCOP" (copyright data)	//
//		is not something we can retrieve by calling any //
//		of the Get functions.  If we call				//
//		RetrField("TCOP") we can retrieve this field.	//
//////////////////////////////////////////////////////////

char *ID3::RetrField(char *identifier)
{
	if((myID3.version != ID3_VERSION2) || (IsPrimed() == 0))
		return 0;

	char *dest;
	char tmpHeader[10];
	int framesize = 0, pos = 0;

	tmpHeader[0] = '\0';
	
	StrCopy(tmpHeader, myID3.ID3TAG, 10);

	while(!FrameIsNull(tmpHeader, 10))
	{
		pos += 10;
		framesize = GetFourByteSyncSafe(tmpHeader[4], tmpHeader[5], tmpHeader[6], tmpHeader[7]);
		
		if(strstr(tmpHeader, identifier))
		{
			dest = new char[framesize+1];
			dest[framesize] = '\0';
			StrCopy(dest, &myID3.ID3TAG[pos + 1], framesize - 1);
			dest[framesize-1] = '\0';
			return dest;
		}
		pos += framesize;
		if(pos > myID3.size)
		{
			dest = new char[1];
			dest[0] = '\0';
			return dest; 
		}
		StrCopy(tmpHeader, &myID3.ID3TAG[pos], 10);
	}
	dest = new char[1];
	dest[0] = '\0';
	return dest;
}

//////////////////////////////////////////////////////////
//Set_() - Set functions, use these to set id3		//
//		structure fields.  Setting does not occur		//
//		immediately, must call GenerateTag and WriteTag //
//		to update the file.								//
//////////////////////////////////////////////////////////

int ID3::SetAlbum(char *src)
{
	delete[] myID3.album;
	myID3.album = new char[strlen(src)+1];
	strcpy(myID3.album, src);
	return 0;
}

int ID3::SetArtist(char *src)
{
	delete[] myID3.band;
	myID3.band = new char[strlen(src)+1];
	strcpy(myID3.band, src);
	return 0;
}

int ID3::SetComments(char *src)
{
	delete[] myID3.comment;
	myID3.comment = new char[strlen(src)+6];
	strcpy(myID3.comment, src);
	return 0;
}

int ID3::SetGenre(char *src)
{
	delete[] myID3.genre;
	myID3.genre = new char[strlen(src)+1];
	strcpy(myID3.genre, src);
	return 0;
}

int ID3::SetTrackNum(char *src)
{
	delete[] myID3.tracknum;
	myID3.tracknum = new char[strlen(src)+1];
	strcpy(myID3.tracknum, src);
	return 0;
}

int ID3::SetTrackTitle(char *src)
{
	delete[] myID3.title;
	myID3.title = new char[strlen(src)+1];
	strcpy(myID3.title, src);
	return 0;
}

int ID3::SetYear(char *src)
{
	delete[] myID3.year;
	myID3.year = new char[strlen(src)+1];
	strcpy(myID3.year, src);
	return 0;
}

//////////////////////////////////////////////////////////
//SetVersion() - MUST BE CALLED BEFORE ANY ID3			//
//		OPERATIONS CAN TAKE PLACE!!!!!	MUST BE CALLED	//
//		BEFORE EVERY TAG THAT IS CREATED AND OR LOADED  //
//		AND MODIFIED									//
//////////////////////////////////////////////////////////

int ID3::SetVersion(int version)
{
	myID3.version = version;
	return version;
}

char *ID3::StrCopy(char *pDest, const char *toCopy, int length)
{
	for(int x = 0; x < length; x++)
		pDest[x] = toCopy[x];
	return pDest;
}

int ID3::StrFill(char *str, int fillx, int ch)
{
	for(int x = 0; x < fillx; x++)
		str[x] = ch;
	return 0;
}

//////////////////////////////////////////////////////////
//WriteTag() - Write the new ID3 tag to the specified	//
//		file.											//
//////////////////////////////////////////////////////////

int ID3::WriteTag(char *filepath)
{
	char *buffer1, *buffer2, *nulls;
	DWORD bytes1, bytes2, sentinel;
	HANDLE fHandle;
	int len, nullsize;

	fHandle =	CreateFile(filepath,
			GENERIC_WRITE | GENERIC_READ,
			0,
			0,
			OPEN_EXISTING,
			FILE_ATTRIBUTE_NORMAL,
			0);
	if(myID3.version == ID3_VERSION2)
	{
		if(myID3.size < myID3.currsize)
		{
			len		= myID3.currsize-myID3.size;
			buffer1 = new char[len+1];
			buffer2 = new char[len+1];

			ReadFile(fHandle, buffer1, len, &bytes1, 0);
			ReadFile(fHandle, buffer2, len, &bytes2, 0);
			do
			{
				SetFilePointer(fHandle, -bytes2, 0, FILE_CURRENT);
				WriteFile(fHandle, buffer1, bytes1, &sentinel, 0);
				ReadFile(fHandle, buffer1, len, &bytes1, 0);
				SetFilePointer(fHandle, -(bytes1), 0, FILE_CURRENT);
				WriteFile(fHandle, buffer2, bytes2, &sentinel, 0);
				ReadFile(fHandle, buffer2, len, &bytes2, 0);
			}while((bytes1 != 0) && (bytes2 != 0));
			CloseHandle(fHandle);
			fHandle =	CreateFile(filepath,
					GENERIC_WRITE,
					0,
					0,
					OPEN_EXISTING,
					FILE_ATTRIBUTE_NORMAL,
					0);
			SetFilePointer(fHandle, 0, 0, FILE_END);
			if(bytes1 != 0)
				WriteFile(fHandle, buffer1, bytes1, &sentinel, 0);
			else if(bytes2 != 0)
				WriteFile(fHandle, buffer2, bytes2, &sentinel, 0);
			nulls = new char[myID3.currsize+1];
			nullsize = myID3.currsize;
			StrFill(nulls, myID3.currsize, 0);
			delete[] buffer1, buffer2;
		}
		else if(myID3.size > myID3.currsize)
		{
			strncpy(myID3.NEWID3, "ID3", 3);
			myID3.NEWID3[3] = 3;
			myID3.NEWID3[4] = 0;
			myID3.NEWID3[5] = 0;
			EncryptSync(myID3.NEWID3, myID3.size, 6, 4);
			nulls = new char[myID3.size+1];
			StrFill(nulls, myID3.size, 0);
			nullsize = myID3.size;
		}
		else if(myID3.size == myID3.currsize)
		{
			nullsize = myID3.size;
			nulls = new char[myID3.size+1];
			StrFill(nulls, myID3.size, 0);
		}

		WriteFile(fHandle, nulls, nullsize, &sentinel, 0);
		SetFilePointer(fHandle, 0, 0, FILE_BEGIN);
		WriteFile(fHandle, myID3.NEWID3, myID3.currsize, &sentinel, 0);
		delete[] nulls;
	}
	else if(myID3.version == ID3_VERSION1)
	{
		SetFilePointer(fHandle, -128, 0, FILE_END);
		WriteFile(fHandle, "TAG", 3, &sentinel, 0);
		WriteFile(fHandle, myID3.title, 30, &sentinel, 0);
		WriteFile(fHandle, myID3.band, 30, &sentinel, 0);
		WriteFile(fHandle, myID3.album, 30, &sentinel, 0);
		WriteFile(fHandle, myID3.year, 4, &sentinel, 0);
		WriteFile(fHandle, myID3.comment, 30, &sentinel, 0);
		WriteFile(fHandle, &myID3.genre[0], 1, &sentinel, 0);
	}
	CloseHandle(fHandle);
	return 0;
}


#endif